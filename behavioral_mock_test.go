// Code generated by MockGen. DO NOT EDIT.
// Source: ecdysis_test.go
//
// Generated by this command:
//
//	mockgen -source=ecdysis_test.go -destination=behavioral_mock_test.go -package=ecdysis -typed
//

// Package ecdysis is a generated GoMock package.
package ecdysis

import (
	context "context"
	slog "log/slog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBehavioralTestCommand is a mock of BehavioralTestCommand interface.
type MockBehavioralTestCommand struct {
	ctrl     *gomock.Controller
	recorder *MockBehavioralTestCommandMockRecorder
	isgomock struct{}
}

// MockBehavioralTestCommandMockRecorder is the mock recorder for MockBehavioralTestCommand.
type MockBehavioralTestCommandMockRecorder struct {
	mock *MockBehavioralTestCommand
}

// NewMockBehavioralTestCommand creates a new mock instance.
func NewMockBehavioralTestCommand(ctrl *gomock.Controller) *MockBehavioralTestCommand {
	mock := &MockBehavioralTestCommand{ctrl: ctrl}
	mock.recorder = &MockBehavioralTestCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBehavioralTestCommand) EXPECT() *MockBehavioralTestCommandMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockBehavioralTestCommand) Args(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockBehavioralTestCommandMockRecorder) Args(arg0 any) *MockBehavioralTestCommandArgsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockBehavioralTestCommand)(nil).Args), arg0)
	return &MockBehavioralTestCommandArgsCall{Call: call}
}

// MockBehavioralTestCommandArgsCall wrap *gomock.Call
type MockBehavioralTestCommandArgsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBehavioralTestCommandArgsCall) Return(arg0 error) *MockBehavioralTestCommandArgsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBehavioralTestCommandArgsCall) Do(f func([]string) error) *MockBehavioralTestCommandArgsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBehavioralTestCommandArgsCall) DoAndReturn(f func([]string) error) *MockBehavioralTestCommandArgsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockBehavioralTestCommand) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockBehavioralTestCommandMockRecorder) Execute(ctx any) *MockBehavioralTestCommandExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockBehavioralTestCommand)(nil).Execute), ctx)
	return &MockBehavioralTestCommandExecuteCall{Call: call}
}

// MockBehavioralTestCommandExecuteCall wrap *gomock.Call
type MockBehavioralTestCommandExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBehavioralTestCommandExecuteCall) Return(arg0 error) *MockBehavioralTestCommandExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBehavioralTestCommandExecuteCall) Do(f func(context.Context) error) *MockBehavioralTestCommandExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBehavioralTestCommandExecuteCall) DoAndReturn(f func(context.Context) error) *MockBehavioralTestCommandExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Logger mocks base method.
func (m *MockBehavioralTestCommand) Logger(arg0 *slog.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logger", arg0)
}

// Logger indicates an expected call of Logger.
func (mr *MockBehavioralTestCommandMockRecorder) Logger(arg0 any) *MockBehavioralTestCommandLoggerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockBehavioralTestCommand)(nil).Logger), arg0)
	return &MockBehavioralTestCommandLoggerCall{Call: call}
}

// MockBehavioralTestCommandLoggerCall wrap *gomock.Call
type MockBehavioralTestCommandLoggerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBehavioralTestCommandLoggerCall) Return() *MockBehavioralTestCommandLoggerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBehavioralTestCommandLoggerCall) Do(f func(*slog.Logger)) *MockBehavioralTestCommandLoggerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBehavioralTestCommandLoggerCall) DoAndReturn(f func(*slog.Logger)) *MockBehavioralTestCommandLoggerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Usage mocks base method.
func (m *MockBehavioralTestCommand) Usage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage")
	ret0, _ := ret[0].(string)
	return ret0
}

// Usage indicates an expected call of Usage.
func (mr *MockBehavioralTestCommandMockRecorder) Usage() *MockBehavioralTestCommandUsageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockBehavioralTestCommand)(nil).Usage))
	return &MockBehavioralTestCommandUsageCall{Call: call}
}

// MockBehavioralTestCommandUsageCall wrap *gomock.Call
type MockBehavioralTestCommandUsageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBehavioralTestCommandUsageCall) Return(arg0 string) *MockBehavioralTestCommandUsageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBehavioralTestCommandUsageCall) Do(f func() string) *MockBehavioralTestCommandUsageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBehavioralTestCommandUsageCall) DoAndReturn(f func() string) *MockBehavioralTestCommandUsageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
